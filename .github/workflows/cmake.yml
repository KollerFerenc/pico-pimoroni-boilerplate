name: CMake

on:
  push:
    branches:
      - '**'
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - name: Build on Linux

    runs-on: ubuntu-latest

    env:
      PICO_SDK_PATH: $GITHUB_WORKSPACE/pico-sdk
      PIMORONI_PICO_LIBS: $GITHUB_WORKSPACE/pimoroni-pico

    steps:
    - name: Compiler Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-cmake-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-cmake-${{github.ref}}
          ccache-cmake

    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        path: project

    # Checkout the Pimoroni Pico Libraries
    - name: Checkout Pimoroni Pico Libraries
      uses: actions/checkout@v3
      with:
        repository: pimoroni/pimoroni-pico
        path: pimoroni-pico
        submodules: true

    # Checkout the Pico SDK
    - name: Checkout Pico SDK
      uses: actions/checkout@v3
      with:
        repository: raspberrypi/pico-sdk
        path: pico-sdk
        submodules: true

    # Linux deps
    - name: Install deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install ccache clang-tidy gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE/project -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPIMORONI_PICO_PATH=$GITHUB_WORKSPACE/pimoroni-pico -DPICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        ccache --zero-stats || true
        cmake --build . --config $BUILD_TYPE -j 2
        ccache --show-stats || true

    - name: Upload .uf2 file
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/src/${{github.event.repository.name}}.uf2
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{github.event.repository.name}}-${{github.event.release.tag_name}}.uf2
        asset_content_type: application/octet-stream
